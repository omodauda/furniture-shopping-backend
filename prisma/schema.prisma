// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String        @id @default(uuid())
  email      String        @unique
  fullName   String
  password   String
  photo      String?
  isAdmin    Boolean       @default(false)
  isVerified Boolean       @default(false)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  addresses  UserAddress[]
  orders     Order[]
  cart       CartItem[]

  @@map("users")
}

model UserAddress {
  id         String   @id @default(uuid())
  isDefault  Boolean  @default(false)
  fullName   String
  address    String
  postalCode String
  country    String
  city       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  orders     Order[]

  @@map("user_address")
}

model Product {
  id                String          @id @default(uuid())
  name              String
  description       String
  price             Decimal         @db.Decimal(10, 2)
  images            ProductImage[]
  quantity          Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  productCategory   ProductCategory @relation(fields: [productCategoryId], references: [id], onDelete: Cascade)
  productCategoryId String
  orders            OrderItem[]
  cart              CartItem[]

  @@map("products")
}

model ProductCategory {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]

  @@map("product_categories")
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  publicId  String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@map("product_image")
}

model Order {
  id                String         @id @default(uuid())
  orderNo           String
  total             Decimal        @db.Decimal(10, 2)
  status            ShippingStatus @default(Processing)
  user              User           @relation(fields: [userId], references: [id])
  userId            String
  orderItems        OrderItem[]
  deliveryAddress   UserAddress    @relation(fields: [deliveryAddressId], references: [id])
  deliveryAddressId String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt

  @@map("orders")
}

enum ShippingStatus {
  Processing
  Cancelled
  Delivered
}

model OrderItem {
  id        String  @id @default(uuid())
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String

  @@map("order_items")
}

model CartItem {
  id        String  @id @default(uuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  product   Product @relation(fields: [productId], references: [id])
  productId String
  quantity  Int

  @@map("cart_items")
}
